<?php

/*   IMPORTANT NOTE FOR CONTRIBUTORS

Hello, and welcome to Graphene.

1. CODING

    There are some oddities in the code you shuld be warned about.
    
    First of all, and for hystorical reasons, the lower level classes are still
    in slug_case (I adopted the camelCase convention only recently). 
    This does not affect the public API but will look strange to contributors.
    As soon as I have the time to do it, I'll restyle thoses classes (well, if 
    someone else hasn't done it before...).
    
    Secondly I'm aware of the fact that I do not follow many of the best 
    practices in code styling. For example I always write:
    
        if( something ) {
    
    instead of:
    
        if (something) {
        
    I apologize for this, but unfortunately I only recently was told there is 
    a thing called php-fig (http://www.php-fig.org/psr/psr-2/) which I'm willed
    to adopt from now on and so should you if you happen to contribute.


2. TESTING

    There are no formal tests yet, sorry for that. 
    
    For the moment the only tests you can run are the examples. They do test a 
    lot of stuff and if you launch them and they work correctly (no 'Ooops' or 
    mean exceptions in the output) this should be interpreted at least as a very 
    good sign nothing is broken.
    
    On how to run the examples go to the examples directory and read the README 
    file.


3. HAVE FUN

    Those things being said, thanks for your interest, have fun and let me know.


- Max Jacob 02 2015
*/


/**
\mainpage Graphene Reference

Welcome to the Graphene reference documentation.

*/

/**

\section def-file-naming Naming

Each definition file specifies the data structure of the corresponding node type. 
The file must have the same name as the type and be placed in the \em definitions 
directory of the classpath. 

If the type is in a namespace, the definition file must be in a subdirectory having
the same name as the namespace. For example a type \em ab_cd_SomeType will have it's
definition file in:

    {classpath}/definitions/ab/cd/SomeType.def
    
While a type in the root namespace, for example \em MyType will be located directly
on the \em definitions directory root:

    {classpath}/definitions/MyType.def

@sa \ref type-names
    
Usually you should start coding with Graphene in unfrozen mode (see \ref freeze-unfreeze)
and the definition files will be created automatically.

But of course you can do it the other way aroud, if you like it better: creating the
definition files first, and then start coding, which is a more traditional approach.

\section def-file-syntax Syntax

\subsection def-file-comments Comments

Comments are lines that start with a '#' character. Such lines will be ignored by
the interpreter and can be used for annotations. The files generated by graphene 
have a headline comment with the type name, and before each generated property
there is a comment like this:

    # AUTO-GENERATED
    
You should remove that comment when you revise the property, so you will remember
it is not the auto-generated version anymore, and place your own comments.

\subsection def-file-directives Directives

Comments by side, the first lines a def file can contain are the (optional) directives.

The general syntax for a directive is:

    \\DIRECTIVE_NAME [DIRECTIVE_PARAMS]

At the time being there are only two directives:

    \\frozen 

Which tells the whole type is frozen, i.e. Graphene will not add any
property nor modify the existing ones.

The second directive you can insert is:

    \\supertype TYPE_NAME

Which indicates that this type extends another type.
The type name will be interpreted as relative to the current type's namespace.

@sa \ref type-names

\subsection property-defs Property definitions

The syntax of a property definition is:

    PROP_DEF := (NODE_TYPE|DATA_TYPE)[CARDINALITY] NAME ["as" ALIAS] [MASK] [FLAGS]+ ["!"]

NODE_TYPE is the type of node that is expected as value of that property. 
For example:

    Person owner
    
Indicates that the \em owner property should have Person nodes as values.

For data properties (i.e. not node properties), you write the datatype, which 
is one among following:

- int
- float
- datetime
- string

You can also write 'node' if the property can have any node as value.

The CARDINALITY indicator can be either omitted, in which case the property will
be considered as a single valued property, or be "[]" to indicate the property
has a list of values, or "{}" to indicate the property has a set of values.

For example:

    User{} members

@sa ::graphene::Prop

The NAME is the property name. It MUST be in camel case starting with a lower
case letter. It can also be the name of an inverse property, as for example:

    Group @member


    
@page def-files Definition files
@brief The syntax of the def(inition) files

*/

/**

The query language...

@page gql The Graphene Query Language
@brief The syntax of the query language

*/


require_once 'src/Connection.php';

/**
@brief The connection factory.
*/

class graphene 
{
    
    private static $connections=array();
    private static $autoloading=false;
    
    /**
    @brief Opens a database connection.
    
    @param $params An associative array containing the connection params.
    
    @return a graphene::Connection object.
    
    For example:
    
        $db=graphene::open(array(
            "host"=>"localhost",
            "user"=>"dummy",
            "pwd"=>"dummy",
            "db"=>"test",
            "port"=>null,
            "prefix"=>"",
            "classpath"=>"./model"
        ));
     
     The host, user, pwd and db name must e those of a MySql database you have 
     access to.
     
     The port can be omitted or set to null, in which case the default MySql 
     port (3306) will be used. 
     
     The prefix also is optional and only useful if 
     you want several Graphene databases in a single MySql database: if you the
     prefix will be added to the name of all grahene tables, so there can be
     several sets of such tables you connect to with the same database params
     but with a different prefix.
     
     The classpath is where Graphene should store its definition files and where 
     it should search your custom classes, if any.
        
    */
    public static function open($params) 
    {
        $id='k'.count(self::$connections);
        $conn=\graphene\Connection::_open($params,$id);
        self::$connections[$id]=$conn;
        return $conn;
    }
    
    public static function loadClass($name) 
    {
        foreach (self::$connections as $id=>$conn) {
            if ($conn->_loadClass($name)) break;
        }
    }
    
    public static function enableAutoload() 
    {
        if (!self::$autoloading) {
            spl_autoload_register(array('\Graphene','loadClass'));
            self::$autoloading=true;
        }
    }
    
    public static function _close($id) 
    {
        unset(self::$connections[$id]);
    }
    
    const ACCESS_NONE=0;
    const ACCESS_READ=1;
    const ACCESS_INSERT=2;
    const ACCESS_DELETE=4;
    const ACCESS_UPDATE=8;
    const ACCESS_WRITE=14;
    const ACCESS_FULL=15;
    
    
}


